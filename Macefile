target ?= target
rust_os := target/$(target)/debug/libsos.a

assembly_source_files := $(wildcard src/arch/*.asm)
assembly_object_files := $(patsubst src/arch/%.asm, \
	build/arch/%.o, $(assembly_source_files))

filesystem := build/filesystem.bin
iso := build/os.iso
filesystem_head := build/os_head.bin
kernel := build/kernel.bin

.PHONY: clean all run cargo $(filesystem)

all: run

run: $(iso)
	@qemu-system-i386 -drive file=$(iso),format=raw

$(iso): $(filesystem_head) $(filesystem)
	@cat $(filesystem_head) > $@
	@dd if=$(filesystem) of=$@ count=1 bs=90 conv=notrunc
	@dd if=$(filesystem) skip=1377 bs=512 >> $@

$(filesystem): $(filesystem_head)
	@dd if=/dev/zero of=$@ bs=1m count=40
	-@sudo umount /mnt/tmp
	mkfs.fat -F 32 -R 1377 $@

	@mkdir -p build/isofiles/testdir
	@echo 'This is a sample file for testing' > build/isofiles/testdir/testfile.txt
	
	@$(eval MOUNT_POINT = $(shell hdiutil attach -imagekey diskimage-class=CRawDiskImage -nomount $@))
	@sudo mount -t msdos $(MOUNT_POINT) /mnt
	@sudo cp -r build/isofiles/. /mnt
	@hdiutil detach $(MOUNT_POINT) 
	@rm -r build/isofiles

$(filesystem_head): $(kernel)
	@mkdir -p build
	@nasm -f bin -o $@ -i bootloader/ bootloader/src/bootloader.asm

$(kernel): cargo $(rust_os) $(assembly_object_files)
	@i386-elf-ld -n --gc-sections -m elf_i386 -T linker.ld -o $@ $(assembly_object_files) $(rust_os);\

cargo:
	@export RUST_TARGET_PATH=$(shell pwd); xargo build --target $(target)

clean:
	@rm -rf build
	@xargo clean

build/arch/%.o: src/arch/%.asm
	@mkdir -p $(dir $@)
	@nasm -f elf32 -o $@ $<